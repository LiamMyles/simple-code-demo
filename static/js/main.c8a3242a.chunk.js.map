{"version":3,"sources":["shared-styles/Card.tsx","components/FilmCard.tsx","components/PersonCard.tsx","components/CategorySelection.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CardWrappingDiv","styled","div","FilmCard","film","director","producer","release_date","rt_score","title","PersonCard","person","age","eye_color","gender","hair_color","name","CategorySelectionWrappingDiv","CardGridDiv","CategorySelection","useState","currentCategory","setCurrentCategory","films","setFilms","people","setPeople","loadingState","setLoadingState","requestCategory","category","a","fetch","catch","err","Error","ghibliResponse","json","ghibliJson","disabled","type","onClick","filmsJson","peopleJson","map","key","id","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.c8a3242a.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nexport const CardWrappingDiv = styled.div`\n  width: 300px;\n  margin: 10px;\n  padding: 10px;\n  border: solid 3px lightblue;\n`\n","import React from \"react\"\n\nimport { Film } from \"../interfaces/GhibliApi\"\n\nimport { CardWrappingDiv } from \"../shared-styles/Card\"\n\nexport const FilmCard: React.FC<{ film: Film }> = ({\n  film: { director, producer, release_date, rt_score, title },\n}) => {\n  return (\n    <CardWrappingDiv>\n      <p>\n        <strong>Title:</strong> {title}\n      </p>\n      <p>\n        <strong>Director:</strong> {director}\n      </p>\n      <p>\n        <strong>Producer:</strong> {producer}\n      </p>\n      <p>\n        <strong>Release Date:</strong> {release_date}\n      </p>\n      <p>\n        <strong>Score:</strong> {rt_score}\n      </p>\n    </CardWrappingDiv>\n  )\n}\n","import React from \"react\"\n\nimport { Person } from \"../interfaces/GhibliApi\"\n\nimport { CardWrappingDiv } from \"../shared-styles/Card\"\n\nexport const PersonCard: React.FC<{ person: Person }> = ({\n  person: { age, eye_color, gender, hair_color, name },\n}) => {\n  return (\n    <CardWrappingDiv>\n      <p>\n        <strong>Name:</strong> {name}\n      </p>\n      <p>\n        <strong>Age:</strong> {age}\n      </p>\n      <p>\n        <strong>Gender:</strong> {gender}\n      </p>\n      <p>\n        <strong>Hair Colour:</strong> {hair_color}\n      </p>\n      <p>\n        <strong>Eye Colour:</strong> {eye_color}\n      </p>\n    </CardWrappingDiv>\n  )\n}\n","import React, { useState } from \"react\"\nimport styled from \"styled-components\"\n\nimport { FilmCard } from \"../components/FilmCard\"\nimport { PersonCard } from \"../components/PersonCard\"\n\nimport { Film, Person } from \"../interfaces/GhibliApi\"\n\ntype LoadingStates = \"DORMANT\" | \"LOADING\" | \"LOADED\" | \"ERROR\"\n\nconst CategorySelectionWrappingDiv = styled.div`\n  width: 100%;\n  margin: 0 auto;\n`\n\nconst CardGridDiv = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`\n\nexport const CategorySelection: React.FC = () => {\n  const [currentCategory, setCurrentCategory] = useState<\"FILM\" | \"PEOPLE\">(\n    \"FILM\"\n  )\n\n  const [films, setFilms] = useState<Film[] | null>(null)\n  const [people, setPeople] = useState<Person[] | null>(null)\n  const [loadingState, setLoadingState] = useState<LoadingStates>(\"DORMANT\")\n\n  const requestCategory = async (category: \"films\" | \"people\") => {\n    setLoadingState(\"LOADING\")\n    const ghibliResponse = await fetch(\n      `https://ghibliapi.herokuapp.com/${category}`\n    ).catch((err) => {\n      setLoadingState(\"ERROR\")\n      throw new Error(err)\n    })\n    const ghibliJson = await ghibliResponse.json()\n\n    return ghibliJson\n  }\n\n  return (\n    <CategorySelectionWrappingDiv>\n      <p>pick an option</p>\n      <button\n        disabled={loadingState === \"LOADING\"}\n        type=\"button\"\n        onClick={async () => {\n          if (films === null) {\n            const filmsJson = await requestCategory(\"films\")\n            setFilms(filmsJson)\n          }\n          setLoadingState(\"LOADED\")\n          setCurrentCategory(\"FILM\")\n        }}\n      >\n        Film\n      </button>\n      <button\n        disabled={loadingState === \"LOADING\"}\n        type=\"button\"\n        onClick={async () => {\n          if (people === null) {\n            const peopleJson = await requestCategory(\"people\")\n            setPeople(peopleJson)\n          }\n          setLoadingState(\"LOADED\")\n          setCurrentCategory(\"PEOPLE\")\n        }}\n      >\n        Person\n      </button>\n      <CardGridDiv>\n        {currentCategory === \"FILM\" &&\n          films?.map((film) => {\n            return <FilmCard film={film} key={film.id} />\n          })}\n        {currentCategory === \"PEOPLE\" &&\n          people?.map((person) => {\n            return <PersonCard person={person} key={person.id} />\n          })}\n      </CardGridDiv>\n    </CategorySelectionWrappingDiv>\n  )\n}\n","import React from \"react\"\nimport \"./App.css\"\n\nimport { CategorySelection } from \"./components/CategorySelection\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Ghibli Films & People</h1>\n        <CategorySelection />\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}